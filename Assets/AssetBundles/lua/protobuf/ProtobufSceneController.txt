local oo = require "core/SimpleOO"
require "core/protobuf"

local ProtobufSceneController = oo.Class.Create()
local Entity = oo.Class.Create()

function ProtobufSceneController:KernelLoaded(monoComonent)
	self.monoComponent = monoComponent

	--prefab cache
	self.entityPrefab = ResourceMgr.Get("AssetBundles/demo/Entity")

	--init entities dict
	self.entities = {}

	dispatcher:on("OnReceiveMessage", function (evt, msg)
		self:HandleMsg(msg)
	end)

	--player enter
	self:PlayerEnter()

	--ui event
	local logOutBtn = GameObject.Find("Button"):GetComponent("Button")
	logOutBtn.onClick:AddListener(function()
		print("log out clicked")
		self:LogOut()
	end)

end

function ProtobufSceneController:HandleMsg(msg)
	if (msg.head.cmd == 3) then
			--EnterWorldMsg
			print("create entity:" .. msg.body.entityId)
			self:CreateEntity(msg.body.entityId)
		end

	if (msg.head.cmd == 6) then
		--EntityCreatedMsg
		local myEntityId = msg.body.entityId;
		local name = msg.body.name;
		local entity = self:CreateEntity(myEntityId)

		self.player = entity
		print(name)
		entity.gameObject.name = name
	end

	if (msg.head.cmd == 2) then
		--UpdatePosMsg
		local eid = msg.body.entityId
		local e = entities[eid]
		if (e ~= nil) then
			e.gameObject.transform.position = new Vector3(msg.body.x, msg.body.y, 0)
		else
			pritn("entity id:" .. eid .. "not exist")
		end

	end
end

function ProtobufSceneController:LogOut()
	for id,entity in pairs(self.entities) do
		if (not Slua.IsNull(entity.gameObject)) then
			GameObject.Destroy(entity.gameObject)
		end
	end

	self.entities = nil

	if (self.player ~= nil) then
		self:SendLogOutMsg()
	end
end

function ProtobufSceneController:SendLogOutMsg()
	local head = {
		cmd = 7
	}

	self:SendPacket(head, null)
end

function ProtobufSceneController:CreateEntity(entityId, pos)
	local e = Entity.New()
	e.entityId = entityId

	self.entities[entityId] = e
	e.gameObject = GameObject.Instantiate(self.entityPrefab)

	return e
end

function ProtobufSceneController:PlayerEnter(callback)

	print("Player Enter")

	local head = {
		cmd = 5,
		sequence = 1
	}
	self:SendPacket(head, null)

end



function ProtobufSceneController:SendPacket(head, body)
	local msg = {}
	msg.head = head
	msg.body = body
	NetMgr:Send(msg)
end



return ProtobufSceneController