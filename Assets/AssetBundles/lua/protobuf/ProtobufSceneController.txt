local oo = require "core/SimpleOO"
require "core/protobuf"
local PacketUnpacker = require "protobuf/PacketUnpacker"

local ProtobufSceneController = oo.Class.Create()
local Entity = oo.Class.Create()

local unpacker = PacketUnpacker.New()
unpacker:Init()

function ProtobufSceneController:KernelLoaded(monoComonent)
	self.monoComponent = monoComponent

	--prefab cache
	self.entityPrefab = ResourceMgr.Get("AssetBundles/demo/Entity")

	--init entities dict
	self.entities = {}

	unpacker:AddListener(self, function (msg)
		if (msg.head.cmd == 3) then
			--EnterWorldMsg
			print("create entity:" .. msg.body.entityId)
			self:CreateEntity(msg.body.entityId)
		end

		if (msg.head.cmd == 6) then
			--EntityCreatedMsg
			local myEntityId = msg.body.entityId;
			local entity = self:CreateEntity(myEntityId)
			self.player = entity


			LuaTimer.Add(0,20,function(id)
			    local pos = self.player.gameObject.transform.position;
			    local h = {
			    	cmd = 1
			    }
			    local b = {
			    	entityId = 1,--self.player.entityId,
			    	x = 0,--pos.x,
			    	y = 0,--pos.y
			    }

			    self:SendPacket(h,b)
			    return true
			end)
		end

		if (msg.head.cmd == 2) then
			--UpdatePosMsg
			local eid = msg.body.entityId
			local e = entities[eid]
			if (e ~= nil) then
				e.gameObject.transform.position = new Vector3(msg.body.x, msg.body.y, 0)
			else
				pritn("entity id:" .. eid .. "not exist")
			end

		end

	end)

	--player enter
	self:PlayerEnter()

	--ui event
	local logOutBtn = GameObject.Find("Button"):GetComponent("Button")
	logOutBtn.onClick:AddListener(function()
		print("log out clicked")
		self:LogOut()
	end)


end

function ProtobufSceneController:LogOut()
	for id,entity in pairs(self.entities) do
		if (not Slua.IsNull(entity.gameObject)) then
			GameObject.Destroy(entity.gameObject)
		end
	end

	self.entities = nil

	if (self.player ~= nil) then
		self:SendLogOutMsg()
	end
end

function ProtobufSceneController:SendLogOutMsg()
	local head = {
		cmd = 7
	}

	self:SendPacket(head, null)
end

function ProtobufSceneController:CreateEntity(entityId, pos)
	local e = Entity.New()
	e.entityId = entityId

	self.entities[entityId] = e
	e.gameObject = GameObject.Instantiate(self.entityPrefab)

	return e
end

function ProtobufSceneController:PlayerEnter(callback)

	print("Player Enter")

	local head = {
		cmd = 5,
		sequence = 1
	}
	self:SendPacket(head, null)

end



function ProtobufSceneController:SendPacket(head, body)
	local headCode = protobuf.encode("MsgHead", head)
	local packet = LuaPacket()
	packet:WriteHead(headCode)

	if (body ~= nil) then
		local bodyMsgName = protocol_map[head.cmd]
		print("bodyMsgName:"..bodyMsgName)
		local bodyCode = protobuf.encode(bodyMsgName, body)
		packet:WriteBody(bodyCode)
	end

	networkService:Send(packet)
end



return ProtobufSceneController