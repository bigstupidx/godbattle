require "core/protobuf"

local proto = require "protobuf/proto"
local sproto = require "core/sproto"

local host = sproto.new(proto.s2c):host "package"
local request = host:attach(sproto.new(proto.c2s))

local ProtobufSceneController = Class()
local Player = require "entity/Player"
-- import Entity classes && register them
RPC:RegisterEntityClass("Player", Player)

local entities = nil
local player = nil


function printbytes(str)
	local s = ""
	print("str len:" .. #str)
	for i = 1, #str, 1 do
		s = s..str.byte(str, i) .. " "
	end

	return s
end 

local function print_request(name, args)
	print("REQUEST", name)
	if args then
		for k,v in pairs(args) do
			print(k,v)
		end
	end
end

local function print_response(session, args)
	print("RESPONSE", session)
	if args then
		for k,v in pairs(args) do
			print(k,v)
		end
	end
end

local function print_package(t, ...)
	if t == "REQUEST" then
		print_request(...)
	else
		assert(t == "RESPONSE")
		print_response(...)
	end
end

local function send_package(pack)
	-- local package = string.pack(">s2", pack)
	
	dispatcher:dispatchEvent("SendMessage", pack)
end

local session = 0
local function send_request(name, args)
	session = session + 1
	local str = request(name, args, session)
	-- str = "abcde"
	print("send:"..printbytes(str))

	send_package(str)
	print("Request:", session)

end

local function create_entity()
	local e = Player.New()

	return e;

end

local function handle_response(session, args)
	if session == 1 then
		send_request("enter_world", { uid = args.uid})
	end

	if session == 2 then
		print("myeid:".. args.myeid)
		print("entities type:"..type(args.entities))

		entities = args.entities

		local entity = create_entity()
		entity.data = entities[args.myeid]

		entity:Init()
	end
end

local function handle_package(t, ...)
	if t == "REQUEST" then
		print_request(...)
	else
		assert(t == "RESPONSE")
		print_response(...)

		handle_response(...)
	end
end

function ProtobufSceneController:KernelLoaded(monoComonent)
	local controller = self

	self.monoComponent = monoComponent

	--prefab cache
	self.entityPrefab = ResourceMgr.Get("AssetBundles/demo/Entity")

	--init entities dict
	self.entities = {}
	local entities = self.entities
	self.player = nil

	-- set root handler for RPC
	RPC:RegisterRootHandler("CreateEntity", function(root, eid, className, props)
        Log("className:"..className)
	    local class = RPC:GetEntityClass(className)
	    if (class == nil) then
	        Log.Error("class is nil")
	        return
	    end

	    local entity = class()
	    entity.entityId = eid
	    entity.props = props
	    RPC:RegisterEntity(eid, entity)
	    entities[eid] = entity

	    entity:Init()
	end)

	-- Log.Warn("Create Manually Now")
	-- RPC.root["CreateEntity"](100, "Player")

	RPC:RegisterRootHandler("SetPlayer", function(root, entityId)
        Log("set player entityId:"..entityId)
        self.player = self.entities[entityId]

        Camera.main:GetComponent(Camera2DFollow):SetTarget(self.player.tankObj.transform)
	end)

	--player enter
	-- self:PlayerEnter()

	--move cmd handler
	dispatcher:on("MoveCmd", function(evt, dir)
        if (self.player ~= nil) then
        	self.player:Move(dir)
        end
	end)

	dispatcher:on("FireCmd", function(evt)
	if(self.player ~= nil)then
		self.player:Fire()
	end
	end)

	-- timer.performWithDelay(1000, function, 0)
	LuaTimer.Add(0, 33.3, function ()
		for k,v in ipairs(self.entities) do 
			v:LogicUpdate()
		end

	end)

	dispatcher:on("OnReceiveMessage", function(evt, packet)
        local data = packet:ReadBody()

        print("recv data:"..printbytes(data))

        handle_package(host:dispatch(data))
	end)


	--send request
	send_request("getuserinfo", { uid = "hello"})

end



function ProtobufSceneController:HandleMsg(msg)
	
end

function ProtobufSceneController:LogOut()
	for id,entity in pairs(self.entities) do
		if (not Slua.IsNull(entity.gameObject)) then
			GameObject.Destroy(entity.gameObject)
		end
	end

	self.entities = nil

	if (self.player ~= nil) then
		self:SendLogOutMsg()
	end
end

function ProtobufSceneController:SendLogOutMsg()
	local head = {
		cmd = 7
	}

	self:SendPacket(head, null)
end

function ProtobufSceneController:CreateEntity(entityId, pos)
	local e = Entity.New()
	e.entityId = entityId

	self.entities[entityId] = e
	local go = GameObject.Instantiate(self.entityPrefab)
	e.gameObject = go
	go.transform.rotation = Quaternion.identity
	go.transform.localScale = Vector3.one

	return e
end

function ProtobufSceneController:PlayerEnter(callback)

	RPC:RemoteCall(0, "login", "clientIP");
	
end


return ProtobufSceneController