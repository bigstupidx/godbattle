local oo = require "core/SimpleOO"
require "core/protobuf"

local ProtobufSceneController = oo.Class.Create()
local Entity = oo.Class.Create()

function ProtobufSceneController:KernelLoaded(monoComonent)
	self.monoComponent = monoComponent

	--prefab cache
	self.entityPrefab = ResourceMgr.Get("AssetBundles/demo/Entity")

	--init entities dict
	self.entities = {}

	--player enter
	self:PlayerEnter()

	--ui event
	local logOutBtn = GameObject.Find("Button"):GetComponent("Button")
	logOutBtn.onClick:AddListener(function()
		print("log out clicked")
		self:LogOut()
	end)

end

function ProtobufSceneController:HandleMsg(msg)
	
end

function ProtobufSceneController:LogOut()
	for id,entity in pairs(self.entities) do
		if (not Slua.IsNull(entity.gameObject)) then
			GameObject.Destroy(entity.gameObject)
		end
	end

	self.entities = nil

	if (self.player ~= nil) then
		self:SendLogOutMsg()
	end
end

function ProtobufSceneController:SendLogOutMsg()
	local head = {
		cmd = 7
	}

	self:SendPacket(head, null)
end

function ProtobufSceneController:CreateEntity(entityId, pos)
	local e = Entity.New()
	e.entityId = entityId

	self.entities[entityId] = e
	e.gameObject = GameObject.Instantiate(self.entityPrefab)

	return e
end

function ProtobufSceneController:PlayerEnter(callback)

	print("Player Enter")
	local root = RPC:GetRoot()
	print(type(root))

	root:RemoteCall("sayHello", "from client", "12345")

end


return ProtobufSceneController