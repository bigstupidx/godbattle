local oo = require "core/SimpleOO"
require "core/protobuf"


function print_r ( t )  
    local print_r_cache={}
    local function sub_print_r(t,indent)
        if (print_r_cache[tostring(t)]) then
            print(indent.."*"..tostring(t))
        else
            print_r_cache[tostring(t)]=true
            if (type(t)=="table") then
                for pos,val in pairs(t) do
                    if (type(val)=="table") then
                        print(indent.."["..pos.."] => "..tostring(t).." {")
                        sub_print_r(val,indent..string.rep(" ",string.len(pos)+8))
                        print(indent..string.rep(" ",string.len(pos)+6).."}")
                    elseif (type(val)=="string") then
                        print(indent.."["..pos..'] => "'..val..'"')
                    else
                        print(indent.."["..pos.."] => "..tostring(val))
                    end
                end
            else
                print(indent..tostring(t))
            end
        end
    end
    if (type(t)=="table") then
        print(tostring(t).." {")
        sub_print_r(t,"  ")
        print("}")
    else
        sub_print_r(t,"  ")
    end
    print()
end



protocol_map = {
	[1] = "game.MoveMsg",
	[2] = "game.UpdatePosMsg",
	[3] = "game.EnterWorldMsg",
	[4] = "game.ExitWorldMsg",
	[5] = "game.CreateEntityMsg",
	[6] = "game.EntityCreatedMsg",
	[7] = "game.LogOutMsg"
}

print_r(protocol_map)

local PacketUnpacker = oo.Class.Create()


function PacketUnpacker:Init()
	
	self:RegisterProtocol("AssetBundles/protocol/MsgHead")
	self:RegisterProtocol("AssetBundles/protocol/GameMsg")

	dispatcher:on("OnReceivePacket", function(evt, packet)

		local msg = {}
		local hc = packet:ReadHead()
		local head = protobuf.decode("MsgHead", hc)
		msg.head = head

		local bc = packet:ReadBody()
		if (bc ~= nil) then
			local name = protocol_map[head.cmd]
			msg.body = protobuf.decode(name, bc)
		end

		self.listener.callback(msg)
	end)
end

function PacketUnpacker:RegisterProtocol(proto)

	local asset = ResourceMgr.Get(proto)
	local data = asset.bytes
	local buffer = SLua.ByteArray(data)

	protobuf.register(buffer)

end

function PacketUnpacker:AddListener(listener, callback)
	self.listener = {
		target = listener,
		callback = callback
	}
end



return PacketUnpacker