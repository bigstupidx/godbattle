require "core/protobuf"

local Rpc = Class()

function Rpc:Init()
	self.entities = {}

	--self:RegisterProtocol("AssetBundles/protocol/Rpc")

	dispatcher:on("OnReceiveMessage", function (evt, msg)
		--here should be server to client rpc cmd
		local cmd = msg.head.cmd
		print("msg cmd:".. cmd)
		if (cmd == 1) then
			local eid = msg.body.entityId
			print("entityId:"..eid)

			local entity = self.entities[eid]
			if(entity == nil) then
				Log.Warn("entity not exist, use root")

				entity = self.entities[-1]
			end

			local method = msg.body.method

			local callResult = { pcall(entity[method], entity, unpack(msg.body.args)) }
			if (callResult[1] == false) then
				Log.Error("failed to call method:".. method .." >> " .. callResult[2])
			end

		end

	end)

end

function Rpc:GetRoot()
	return self.entities[-1]
end

function Rpc:RegisterEntity(id, entity)
	if (self.entities[id] ~= nil) then
		Log.Error("entity with id "..id.." existed, cannot regiter again")

		return
	end

	self.entities[id] = entity
end

function Rpc:RemoteCall(eid, method, ...)
	local msg = {}
	msg.head = {
		cmd = 2;
		type = 1;
	}

	--here, we need json encode as a array,not table. so remove "n".
	arg.n = nil

	msg.body = {
		entityId = eid;
		method = method;
		args = arg;
	}

	dispatcher:emit("SendMessage", msg)
end

return Rpc